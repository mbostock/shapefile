#!/usr/bin/env node

var optimist = require("optimist"),
    shapefile = require("../");

var argv = optimist
    .usage("Usage: \033[1mshp2json\033[0m [options] input\n\n"

+ "Version: " + shapefile.version + "\n\n"

+ "Converts the specified input shapefile to a GeoJSON FeatureCollection.")

    .options("o", {
      alias: "out",
      describe: "output GeoJSON file name",
      default: "/dev/stdout",
    })
    .options("ignore-properties", {
      describe: "skip reading shapefile properties (.dbf) for faster performance",
      type: "boolean",
      default: false
    })
    .options("property-encoding", {
      describe: "character encoding for reading shapefile properties (.dbf)",
      default: null
    })
    .options("header", {
      describe: "print shapefile header as GeoJSON object and exit",
      type: "boolean",
      default: false
    })
    .options("help", {
      describe: "display this helpful message",
      type: "boolean",
      default: false
    })
    .check(function(argv) {
      if (argv._.length !== 1) throw new Error("exactly one input required");
    })
    .argv;

if (argv.help) return optimist.showHelp();

var out = argv.o === "/dev/stdout"
    ? process.stdout
    : fs.createWriteStream(argv.o);

var previous;

shapefile.readStream(argv._[0], {encoding: argv["property-encoding"], "ignore-properties": !!argv["ignore-properties"]})
    .on("header", function(header) {
      if(argv.header) {
        out.write(JSON.stringify(header) + "\n");
        process.exit(0);
      }
    })
    .on("feature", function(feature) {
      if (previous) out.write(",\n");
      else out.write("{\"type\":\"FeatureCollection\",\"features\":[\n");
      out.write(JSON.stringify(feature));
      previous = true;
    })
    .on("end", function() {
      out.write("]}\n");
      if (out !== process.stdout) out.end();
    });
